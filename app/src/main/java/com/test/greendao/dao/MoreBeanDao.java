package com.test.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.test.greendao.more2more.JoinEntity;

import com.test.greendao.more2more.MoreBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MORE_BEAN".
*/
public class MoreBeanDao extends AbstractDao<MoreBean, Long> {

    public static final String TABLENAME = "MORE_BEAN";

    /**
     * Properties of entity MoreBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MId = new Property(0, Long.class, "mId", true, "_id");
        public final static Property MMoreName = new Property(1, String.class, "mMoreName", false, "more_name_id");
    }

    private DaoSession daoSession;

    private Query<MoreBean> more2Bean_MoreBeanListQuery;

    public MoreBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MoreBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MORE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: mId
                "\"more_name_id\" TEXT);"); // 1: mMoreName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MORE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MoreBean entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String mMoreName = entity.getMMoreName();
        if (mMoreName != null) {
            stmt.bindString(2, mMoreName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MoreBean entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String mMoreName = entity.getMMoreName();
        if (mMoreName != null) {
            stmt.bindString(2, mMoreName);
        }
    }

    @Override
    protected final void attachEntity(MoreBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MoreBean readEntity(Cursor cursor, int offset) {
        MoreBean entity = new MoreBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // mMoreName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MoreBean entity, int offset) {
        entity.setMId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMMoreName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MoreBean entity, long rowId) {
        entity.setMId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MoreBean entity) {
        if(entity != null) {
            return entity.getMId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MoreBean entity) {
        return entity.getMId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "moreBeanList" to-many relationship of More2Bean. */
    public List<MoreBean> _queryMore2Bean_MoreBeanList(Long m2Id) {
        synchronized (this) {
            if (more2Bean_MoreBeanListQuery == null) {
                QueryBuilder<MoreBean> queryBuilder = queryBuilder();
                queryBuilder.join(JoinEntity.class, JoinEntityDao.Properties.MId)
                    .where(JoinEntityDao.Properties.M2Id.eq(m2Id));
                more2Bean_MoreBeanListQuery = queryBuilder.build();
            }
        }
        Query<MoreBean> query = more2Bean_MoreBeanListQuery.forCurrentThread();
        query.setParameter(0, m2Id);
        return query.list();
    }

}
