package com.test.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.test.greendao.one2more.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, String> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CId = new Property(0, String.class, "cId", true, "c_id");
        public final static Property CName = new Property(1, String.class, "cName", false, "c_name");
        public final static Property MStuId = new Property(2, String.class, "mStuId", false, "stu_id");
    }

    private Query<Course> students_MCourseListQuery;

    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"c_id\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: cId
                "\"c_name\" TEXT," + // 1: cName
                "\"stu_id\" TEXT);"); // 2: mStuId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
 
        String cId = entity.getCId();
        if (cId != null) {
            stmt.bindString(1, cId);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(2, cName);
        }
 
        String mStuId = entity.getMStuId();
        if (mStuId != null) {
            stmt.bindString(3, mStuId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        String cId = entity.getCId();
        if (cId != null) {
            stmt.bindString(1, cId);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(2, cName);
        }
 
        String mStuId = entity.getMStuId();
        if (mStuId != null) {
            stmt.bindString(3, mStuId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // mStuId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setCId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMStuId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Course entity, long rowId) {
        return entity.getCId();
    }
    
    @Override
    public String getKey(Course entity) {
        if(entity != null) {
            return entity.getCId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Course entity) {
        return entity.getCId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mCourseList" to-many relationship of Students. */
    public List<Course> _queryStudents_MCourseList(String mStuId) {
        synchronized (this) {
            if (students_MCourseListQuery == null) {
                QueryBuilder<Course> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MStuId.eq(null));
                students_MCourseListQuery = queryBuilder.build();
            }
        }
        Query<Course> query = students_MCourseListQuery.forCurrentThread();
        query.setParameter(0, mStuId);
        return query.list();
    }

}
