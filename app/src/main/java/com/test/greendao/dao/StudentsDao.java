package com.test.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.test.greendao.one2more.Students;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENTS".
*/
public class StudentsDao extends AbstractDao<Students, String> {

    public static final String TABLENAME = "STUDENTS";

    /**
     * Properties of entity Students.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SId = new Property(0, String.class, "sId", true, "stu_id");
        public final static Property SStuId = new Property(1, String.class, "sStuId", false, "stuId");
        public final static Property SName = new Property(2, String.class, "sName", false, "stu_name");
    }

    private DaoSession daoSession;


    public StudentsDao(DaoConfig config) {
        super(config);
    }
    
    public StudentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENTS\" (" + //
                "\"stu_id\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: sId
                "\"stuId\" TEXT," + // 1: sStuId
                "\"stu_name\" TEXT);"); // 2: sName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Students entity) {
        stmt.clearBindings();
 
        String sId = entity.getSId();
        if (sId != null) {
            stmt.bindString(1, sId);
        }
 
        String sStuId = entity.getSStuId();
        if (sStuId != null) {
            stmt.bindString(2, sStuId);
        }
 
        String sName = entity.getSName();
        if (sName != null) {
            stmt.bindString(3, sName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Students entity) {
        stmt.clearBindings();
 
        String sId = entity.getSId();
        if (sId != null) {
            stmt.bindString(1, sId);
        }
 
        String sStuId = entity.getSStuId();
        if (sStuId != null) {
            stmt.bindString(2, sStuId);
        }
 
        String sName = entity.getSName();
        if (sName != null) {
            stmt.bindString(3, sName);
        }
    }

    @Override
    protected final void attachEntity(Students entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Students readEntity(Cursor cursor, int offset) {
        Students entity = new Students( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sStuId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // sName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Students entity, int offset) {
        entity.setSId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSStuId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Students entity, long rowId) {
        return entity.getSId();
    }
    
    @Override
    public String getKey(Students entity) {
        if(entity != null) {
            return entity.getSId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Students entity) {
        return entity.getSId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
