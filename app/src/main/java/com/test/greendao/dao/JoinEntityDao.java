package com.test.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.test.greendao.more2more.JoinEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOIN_ENTITY".
*/
public class JoinEntityDao extends AbstractDao<JoinEntity, Long> {

    public static final String TABLENAME = "JOIN_ENTITY";

    /**
     * Properties of entity JoinEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MJoinId = new Property(0, Long.class, "mJoinId", true, "_id");
        public final static Property MId = new Property(1, Long.class, "mId", false, "M_ID");
        public final static Property M2Id = new Property(2, Long.class, "m2Id", false, "M2_ID");
    }


    public JoinEntityDao(DaoConfig config) {
        super(config);
    }
    
    public JoinEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOIN_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: mJoinId
                "\"M_ID\" INTEGER," + // 1: mId
                "\"M2_ID\" INTEGER);"); // 2: m2Id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOIN_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JoinEntity entity) {
        stmt.clearBindings();
 
        Long mJoinId = entity.getMJoinId();
        if (mJoinId != null) {
            stmt.bindLong(1, mJoinId);
        }
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(2, mId);
        }
 
        Long m2Id = entity.getM2Id();
        if (m2Id != null) {
            stmt.bindLong(3, m2Id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JoinEntity entity) {
        stmt.clearBindings();
 
        Long mJoinId = entity.getMJoinId();
        if (mJoinId != null) {
            stmt.bindLong(1, mJoinId);
        }
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(2, mId);
        }
 
        Long m2Id = entity.getM2Id();
        if (m2Id != null) {
            stmt.bindLong(3, m2Id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JoinEntity readEntity(Cursor cursor, int offset) {
        JoinEntity entity = new JoinEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mJoinId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // mId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // m2Id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JoinEntity entity, int offset) {
        entity.setMJoinId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setM2Id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JoinEntity entity, long rowId) {
        entity.setMJoinId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JoinEntity entity) {
        if(entity != null) {
            return entity.getMJoinId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JoinEntity entity) {
        return entity.getMJoinId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
