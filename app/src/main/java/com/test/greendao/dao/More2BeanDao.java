package com.test.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.test.greendao.more2more.JoinEntity;

import com.test.greendao.more2more.More2Bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MORE2_BEAN".
*/
public class More2BeanDao extends AbstractDao<More2Bean, Long> {

    public static final String TABLENAME = "MORE2_BEAN";

    /**
     * Properties of entity More2Bean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property M2Id = new Property(0, Long.class, "m2Id", true, "_id");
        public final static Property MMore2Name = new Property(1, String.class, "mMore2Name", false, "more_2name_id");
    }

    private DaoSession daoSession;

    private Query<More2Bean> moreBean_More2BeanListQuery;

    public More2BeanDao(DaoConfig config) {
        super(config);
    }
    
    public More2BeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MORE2_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: m2Id
                "\"more_2name_id\" TEXT);"); // 1: mMore2Name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MORE2_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, More2Bean entity) {
        stmt.clearBindings();
 
        Long m2Id = entity.getM2Id();
        if (m2Id != null) {
            stmt.bindLong(1, m2Id);
        }
 
        String mMore2Name = entity.getMMore2Name();
        if (mMore2Name != null) {
            stmt.bindString(2, mMore2Name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, More2Bean entity) {
        stmt.clearBindings();
 
        Long m2Id = entity.getM2Id();
        if (m2Id != null) {
            stmt.bindLong(1, m2Id);
        }
 
        String mMore2Name = entity.getMMore2Name();
        if (mMore2Name != null) {
            stmt.bindString(2, mMore2Name);
        }
    }

    @Override
    protected final void attachEntity(More2Bean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public More2Bean readEntity(Cursor cursor, int offset) {
        More2Bean entity = new More2Bean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // m2Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // mMore2Name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, More2Bean entity, int offset) {
        entity.setM2Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMMore2Name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(More2Bean entity, long rowId) {
        entity.setM2Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(More2Bean entity) {
        if(entity != null) {
            return entity.getM2Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(More2Bean entity) {
        return entity.getM2Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "more2BeanList" to-many relationship of MoreBean. */
    public List<More2Bean> _queryMoreBean_More2BeanList(Long mId) {
        synchronized (this) {
            if (moreBean_More2BeanListQuery == null) {
                QueryBuilder<More2Bean> queryBuilder = queryBuilder();
                queryBuilder.join(JoinEntity.class, JoinEntityDao.Properties.M2Id)
                    .where(JoinEntityDao.Properties.MId.eq(mId));
                moreBean_More2BeanListQuery = queryBuilder.build();
            }
        }
        Query<More2Bean> query = moreBean_More2BeanListQuery.forCurrentThread();
        query.setParameter(0, mId);
        return query.list();
    }

}
